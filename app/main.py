from fastapi import FastAPI, File, UploadFile
from fastapi.responses import HTMLResponse, RedirectResponse, JSONResponse
from starlette.staticfiles import StaticFiles
from starlette.responses import FileResponse
from fastapi import Request

import torch
import os

from app.config import class_names, model_path, device
from app.model import create_model
from app.utils import preprocess_image

app = FastAPI(
    title="üß† Garbage Classification API",
    description="""
üì∑ –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –º—É—Å–æ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ **EfficientNet-B0**, –æ–±—É—á–µ–Ω–Ω–æ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.

### –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- üöÄ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –º—É—Å–æ—Ä–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
- üß™ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ FastAPI –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω-–∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
- üìä –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏, –º–µ—Ç—Ä–∏–∫–∏, —Ä–∞–Ω–Ω—è—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –ø—Ä–∏—Ü–µ–ª–æ–º –Ω–∞ **ML-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ** –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞–≤—ã–∫–æ–≤ **MLOps + CV + API**.
""",
    version="1.0.0"
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
model = create_model(num_classes=len(class_names), model_path=model_path, device=device)

@app.get("/", summary="–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API")
def read_root():
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Garbage Classification API üöÄ"}

@app.post(
    "/predict",
    summary="üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é",
    description="""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ä–º–∞—Ç JPEG/PNG), –∏ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –∫–ª–∞—Å—Å –æ–±—ä–µ–∫—Ç–∞.

‚ö†Ô∏è –û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–≤–µ—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º (RGB), —Ä–∞–∑–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –¥–æ 224x224.

**–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞**:
- –¢–∏–ø: `multipart/form-data`
- –ü–æ–ª–µ: `file`

**–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞ (Python)**:
```python
import requests

url = "http://127.0.0.1:8000/predict"
with open("image.jpg", "rb") as f:
    files = {"file": f}
    response = requests.post(url, files=files)
print(response.json())"""
    )
async def predict(file: UploadFile = File(...)):
    try:
        # –ß—Ç–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_bytes = await file.read()
        input_tensor = preprocess_image(image_bytes).to(device)

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        with torch.no_grad():
            outputs = model(input_tensor)
            _, predicted_class = torch.max(outputs, 1)
            predicted_label = class_names[predicted_class.item()]

        return {"predicted_class": predicted_label}

    except Exception as e:
        return JSONResponse(status_code=500, content={"error": str(e)})

app.mount("/examples", StaticFiles(directory="app/examples"), name="examples")

@app.get(
    "/view_examples",
    summary="üñºÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤",
    description="""
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª—å—é, —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –∫–ª–∞—Å—Å–∞–º–∏.

üìÇ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Ä—É—Ç—Å—è –∏–∑ –ø–∞–ø–∫–∏ `/examples`.

üß† –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –º–æ–¥–µ–ª—å—é –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º—É—Å–æ—Ä–∞.

---

### üîó –ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–º–µ—Ä—ã:
‚úÖ –ü–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ `/generate_examples`, –Ω–∞–∂–º–∏ [—Å—é–¥–∞](http://localhost:8000/view_examples), —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.

""",
    response_description="HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π"
)
async def view_examples(request: Request):
    CURRENT_DIR = os.path.dirname(os.path.abspath(__file__))
    examples_dir = os.path.join(CURRENT_DIR, "examples")

    try:
        files = [f for f in os.listdir(examples_dir) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
    except FileNotFoundError:
        return JSONResponse(content={"error": "–ü–∞–ø–∫–∞ examples –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}, status_code=404)


    if not files:
        message = {"message": "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."}
        if request.headers.get("accept") == "application/json":
            return JSONResponse(content=message, status_code=200)
        return HTMLResponse(content=f"<h3>{message['message']}</h3>", status_code=200)

    if request.headers.get("accept") == "application/json":
        return JSONResponse(
            content={"message": "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:8000/view_examples –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."},
            status_code=200
        )

    # HTML –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    html_content = """
    <html>
    <head>
        <title>üì∏ –ü—Ä–∏–º–µ—Ä—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏</title>
        <style>
            body {
                font-family: 'Segoe UI', sans-serif;
                padding: 30px;
                background-color: #fafafa;
            }
            h2 {
                text-align: center;
                color: #333;
            }
            .gallery {
                display: flex;
                flex-wrap: wrap;
                justify-content: center;
                gap: 20px;
            }
            .card {
                width: 240px;
                background: white;
                border-radius: 12px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                overflow: hidden;
                text-align: center;
                transition: 0.3s;
            }
            .card:hover {
                transform: scale(1.02);
                box-shadow: 0 6px 16px rgba(0,0,0,0.15);
            }
            .label {
                font-size: 18px;
                font-weight: bold;
                background-color: #4caf50;
                color: white;
                padding: 10px;
                border-bottom: 1px solid #ddd;
            }
            img {
                width: 100%;
                height: 224px;
                object-fit: cover;
            }
        </style>
    </head>
    <body>
        <h2>üß† –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏</h2>
        <div class="gallery">
    """

    for file in files:
        image_url = f"/examples/{file}"
        predicted_class = os.path.splitext(file)[0].split("_")[-1].capitalize()
        html_content += f"""
        <div class="card">
            <div class="label">Predicted: {predicted_class}</div>
            <img src="{image_url}" alt="{predicted_class}">
        </div>
        """

    html_content += """
        </div>
    </body>
    </html>
    """

    return HTMLResponse(content=html_content, status_code=200)











    
    
